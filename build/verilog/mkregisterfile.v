//
// Generated by Bluespec Compiler, version 2023.07-6-gab297c0e (build ab297c0e)
//
// On Sat Sep 30 18:04:17 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_upd                        O     1 const
// src1                           O    32
// RDY_src1                       O     1 const
// src2                           O    32
// RDY_src2                       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 unused
// upd_addr                       I     5
// upd_d                          I    32
// src1_addr                      I     5
// src2_addr                      I     5
// EN_upd                         I     1
// EN_src1                        I     1 unused
// EN_src2                        I     1 unused
//
// Combinational paths from inputs to outputs:
//   (upd_addr, upd_d, src1_addr, EN_upd) -> src1
//   (upd_addr, upd_d, src2_addr, EN_upd) -> src2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkregisterfile(CLK,
		      RST_N,

		      upd_addr,
		      upd_d,
		      EN_upd,
		      RDY_upd,

		      src1_addr,
		      EN_src1,
		      src1,
		      RDY_src1,

		      src2_addr,
		      EN_src2,
		      src2,
		      RDY_src2);
  input  CLK;
  input  RST_N;

  // action method upd
  input  [4 : 0] upd_addr;
  input  [31 : 0] upd_d;
  input  EN_upd;
  output RDY_upd;

  // actionvalue method src1
  input  [4 : 0] src1_addr;
  input  EN_src1;
  output [31 : 0] src1;
  output RDY_src1;

  // actionvalue method src2
  input  [4 : 0] src2_addr;
  input  EN_src2;
  output [31 : 0] src2;
  output RDY_src2;

  // signals for module outputs
  wire [31 : 0] src1, src2;
  wire RDY_src1, RDY_src2, RDY_upd;

  // ports of submodule rf
  wire [31 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2;
  wire [4 : 0] rf$ADDR_1,
	       rf$ADDR_2,
	       rf$ADDR_3,
	       rf$ADDR_4,
	       rf$ADDR_5,
	       rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire CAN_FIRE_src1,
       CAN_FIRE_src2,
       CAN_FIRE_upd,
       WILL_FIRE_src1,
       WILL_FIRE_src2,
       WILL_FIRE_upd;

  // remaining internal signals
  wire [31 : 0] x__read__h312;
  wire [4 : 0] x__read__h242;

  // action method upd
  assign RDY_upd = 1'd1 ;
  assign CAN_FIRE_upd = 1'd1 ;
  assign WILL_FIRE_upd = EN_upd ;

  // actionvalue method src1
  assign src1 = (src1_addr == x__read__h242) ? x__read__h312 : rf$D_OUT_2 ;
  assign RDY_src1 = 1'd1 ;
  assign CAN_FIRE_src1 = 1'd1 ;
  assign WILL_FIRE_src1 = EN_src1 ;

  // actionvalue method src2
  assign src2 = (src2_addr == x__read__h242) ? x__read__h312 : rf$D_OUT_1 ;
  assign RDY_src2 = 1'd1 ;
  assign CAN_FIRE_src2 = 1'd1 ;
  assign WILL_FIRE_src2 = EN_src2 ;

  // submodule rf
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd32),
	    .lo(5'd0),
	    .hi(5'd31)) rf(.CLK(CLK),
			   .ADDR_1(rf$ADDR_1),
			   .ADDR_2(rf$ADDR_2),
			   .ADDR_3(rf$ADDR_3),
			   .ADDR_4(rf$ADDR_4),
			   .ADDR_5(rf$ADDR_5),
			   .ADDR_IN(rf$ADDR_IN),
			   .D_IN(rf$D_IN),
			   .WE(rf$WE),
			   .D_OUT_1(rf$D_OUT_1),
			   .D_OUT_2(rf$D_OUT_2),
			   .D_OUT_3(),
			   .D_OUT_4(),
			   .D_OUT_5());

  // submodule rf
  assign rf$ADDR_1 = src2_addr ;
  assign rf$ADDR_2 = src1_addr ;
  assign rf$ADDR_3 = 5'h0 ;
  assign rf$ADDR_4 = 5'h0 ;
  assign rf$ADDR_5 = 5'h0 ;
  assign rf$ADDR_IN = upd_addr ;
  assign rf$D_IN = upd_d ;
  assign rf$WE = EN_upd ;

  // remaining internal signals
  assign x__read__h242 = EN_upd ? upd_addr : 5'd0 ;
  assign x__read__h312 = EN_upd ? upd_d : 32'd0 ;
endmodule  // mkregisterfile

