//
// Generated by Bluespec Compiler, version 2023.01-31-gfdf107c7 (build fdf107c7)
//
// On Fri Sep  1 17:10:44 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// program_counter                O    32 reg
// RDY_program_counter            O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// EN_program_counter             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage1(CLK,
		RST_N,

		EN_program_counter,
		program_counter,
		RDY_program_counter);
  input  CLK;
  input  RST_N;

  // actionvalue method program_counter
  input  EN_program_counter;
  output [31 : 0] program_counter;
  output RDY_program_counter;

  // signals for module outputs
  wire [31 : 0] program_counter;
  wire RDY_program_counter;

  // register imem
  reg [31 : 0] imem;
  wire [31 : 0] imem$D_IN;
  wire imem$EN;

  // register pc
  reg [31 : 0] pc;
  wire [31 : 0] pc$D_IN;
  wire pc$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_incremeter,
       CAN_FIRE_program_counter,
       WILL_FIRE_RL_incremeter,
       WILL_FIRE_program_counter;

  // actionvalue method program_counter
  assign program_counter = pc ;
  assign RDY_program_counter = 1'd1 ;
  assign CAN_FIRE_program_counter = 1'd1 ;
  assign WILL_FIRE_program_counter = EN_program_counter ;

  // rule RL_incremeter
  assign CAN_FIRE_RL_incremeter = 1'd1 ;
  assign WILL_FIRE_RL_incremeter = 1'd1 ;

  // register imem
  assign imem$D_IN = pc ;
  assign imem$EN = EN_program_counter ;

  // register pc
  assign pc$D_IN = pc + 32'd4 ;
  assign pc$EN = 1'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        imem <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pc <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (imem$EN) imem <= `BSV_ASSIGNMENT_DELAY imem$D_IN;
	if (pc$EN) pc <= `BSV_ASSIGNMENT_DELAY pc$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    imem = 32'hAAAAAAAA;
    pc = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkstage1

